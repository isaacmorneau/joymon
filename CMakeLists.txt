#autogenerated by ACRONYM

cmake_minimum_required(VERSION 3.9.0)
project(joymon)

#default to release
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release CACHE STRING "" FORCE)
endif()

#clear defaults
set(CMAKE_C_FLAGS "-Wall -Wextra")
set(CMAKE_C_FLAGS_DEBUG "-g -O0 -fsanitize=address -fno-omit-frame-pointer")
set(CMAKE_C_FLAGS_RELEASE "-Ofast -s -fno-ident  -march=native -flto -DNDEBUG")

#set some standards
set(CMAKE_C_STANDARD 11)
add_definitions(-D_POSIX_C_SOURCE=200809L -D_DEFAULT_SOURCE)

#ensure IPO and LTO is avalible
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_LINK_WHAT_YOU_USE ON)
include(CheckIPOSupported)
check_ipo_supported(RESULT ipo_supported OUTPUT error)
if(ipo_supported)
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE ON)
else()
    message(STATUS "IPO / LTO not supported: <${error}>")
endif()

#update/pull git submodules
find_package(Git QUIET)
if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
# Update submodules as needed
    option(GIT_SUBMODULE "Check submodules during build" ON)
    if(GIT_SUBMODULE)
        message(STATUS "Submodule update")
        execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                        RESULT_VARIABLE GIT_SUBMOD_RESULT)
        if(NOT GIT_SUBMOD_RESULT EQUAL "0")
            message(FATAL_ERROR "git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
        endif()
    endif()
endif()

if (CMAKE_BUILD_TYPE EQUAL "DEBUG")
    add_definitions(${DEBUG_DEFINES})
else()
    add_definitions(${RELEASE_DEFINES})
endif()


#joymon specific configuration
set(joymon_SOURCES
    "src/main.c"
    "src/events.c"
    "src/config.c"
    )
add_executable(joymon ${joymon_SOURCES})

set(joymon_DEBUG -masm=intel -Wall -Wextra -Wno-unknown-pragmas -g -O0 -fsanitize=address -fno-omit-frame-pointer)
set(joymon_RELEASE -masm=intel -Wall -Wextra -Wno-unknown-pragmas -Ofast -s -fno-ident -march=native -flto -DNDEBUG)
if (CMAKE_BUILD_TYPE EQUAL "DEBUG")
    target_compile_options(joymon PRIVATE ${joymon_DEBUG})
else()
    target_compile_options(joymon PRIVATE ${joymon_RELEASE})
endif()

if (CMAKE_BUILD_TYPE EQUAL "DEBUG")
    target_compile_definitions(joymon PRIVATE ${joymon_DEBUG_DEFINES})
else()
    target_compile_definitions(joymon PRIVATE ${joymon_RELEASE_DEFINES})
endif()

